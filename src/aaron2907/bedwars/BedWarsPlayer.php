<?php

namespace aaron2907\bedwars;

use aaron2907\bedwars\scoreboard\Scoreboard;
use aaron2907\bedwars\session\types\PlayerSession;
use aaron2907\bedwars\utils\BedWarsUtils;
use pocketmine\Player;
use pocketmine\utils\TextFormat;

/**
 * Class BedWarsPlayer
 * @package aaron2907\bedwars
 */
class BedWarsPlayer extends Player
{

    /**
     * @return PlayerSession|null
     */
    public function getSession(): ?PlayerSession
    {
        return BedWarsLoader::getInstance()->getSessionManager()->getSession($this);
    }

    public function getScoreboard(): ?Scoreboard
    {
        return BedWarsLoader::getInstance()->getScoreboardManager()->getScoreboard($this);
    }

    public function join(): void
    {
        if (!BedWarsLoader::getInstance()->getSessionManager()->isSession($this))
            BedWarsLoader::getInstance()->getSessionManager()->addSession($this);

        if (!BedWarsLoader::getInstance()->getScoreboardManager()->isScoreboard($this))
            BedWarsLoader::getInstance()->getScoreboardManager()->addScoreboard($this);

        BedWarsLoader::getInstance()->getYamlProvider()->createPlayer($this);

        $this->spawn();
    }

    public function onUpdate(int $currentTick): bool
    {
        if (BedWarsLoader::getInstance()->getScoreboardManager()->isScoreboard($this))
            $this->updateScoreboard();

        return parent::onUpdate($currentTick); // TODO: Change the autogenerated stub
    }

    private function updateScoreboard(): void
    {
        $scoreboard = $this->getScoreboard();

        switch ($this->getSession()->getScoreboardType()) {
            case 'spawn':
                $scoreboard->addLine(0, str_repeat(' ', 25));
                $scoreboard->addLine(1, ' ' . TextFormat::colorize(BedWarsLoader::getInstance()->getTranslateManager()->getTranslation('scoreboard.level', $this->getSession()->getLang())));
                $scoreboard->addLine(2, '         ');
                $scoreboard->addLine(3, ' ' . TextFormat::colorize(BedWarsLoader::getInstance()->getTranslateManager()->getTranslation('scoreboard.coins', $this->getSession()->getLang())));
                $scoreboard->addLine(4, '   ');
                $scoreboard->addLine(5, ' ' . TextFormat::colorize(BedWarsLoader::getInstance()->getTranslateManager()->getTranslation('scoreboard.kill', $this->getSession()->getLang())));
                $scoreboard->addLine(6, ' ' . TextFormat::colorize(BedWarsLoader::getInstance()->getTranslateManager()->getTranslation('scoreboard.wins', $this->getSession()->getLang())));
                $scoreboard->addLine(7, '    ');
                $scoreboard->addLine(8, TextFormat::YELLOW . ' play.hypixel.net');
                break;
            case 'queue':
                $game = $this->getSession()->getGame();

                if ($game == null)
                    return;

                $scoreboard->addLine(0, str_repeat(' ', 25));
                $scoreboard->addLine(1, ' ' . TextFormat::colorize(str_replace('{map}', $game->getLevel()->getFolderName(), BedWarsLoader::getInstance()->getTranslateManager()->getTranslation('scoreboard.map', $this->getSession()->getLang()))));
                $scoreboard->addLine(2, ' ' . TextFormat::colorize(str_replace(['{players}', '{maxPlayers}'], [count($game->getPlayers()), ($game->getPlayerPerTeam() * 4)], BedWarsLoader::getInstance()->getTranslateManager()->getTranslation('scoreboard.players', $this->getSession()->getLang()))));
                $scoreboard->addLine(3, '     ');
                $scoreboard->addLine(4, ' ' . TextFormat::colorize(BedWarsLoader::getInstance()->getTranslateManager()->getTranslation('scoreboard.waiting', $this->getSession()->getLang())));
                $scoreboard->addLine(5, '   ');

                $mode = 'Solo';
                $playerPerTeam = $game->getPlayerPerTeam();
                if ($playerPerTeam == 2)
                    $mode = 'Duo';
                if ($playerPerTeam == 3)
                    $mode = 'Trio';
                if ($playerPerTeam == 4)
                    $mode = 'Squad';

                $scoreboard->addLine(6, ' ' . TextFormat::colorize(str_replace('{mode}', $mode, BedWarsLoader::getInstance()->getTranslateManager()->getTranslation('scoreboard.mode', $this->getSession()->getLang()))));
                $scoreboard->addLine(7, '    ');
                $scoreboard->addLine(8, TextFormat::YELLOW . ' play.hypixel.net');
                break;
            case 'playing':
                $game = $this->getSession()->getGame();

                $data[] = str_repeat(' ', 25);
                $data[] = '   ';

                foreach ($game->getTeams() as $session) {
                    if ($session->hasBed())
                        $data[] = ' '.BedWarsUtils::TEAMS[$session->getColor()][0]. BedWarsUtils::TEAMS[$session->getColor()][1] .' '.TextFormat::GREEN.$session->getColor();
                    else
                        $data[] = ' '.BedWarsUtils::TEAMS[$session->getColor()][0]. BedWarsUtils::TEAMS[$session->getColor()][1] .' '.TextFormat::RED.$session->getColor();
                }

                $data[] = str_repeat(' ', 24);
                $data[] = TextFormat::YELLOW . ' play.hypixel.net';

                foreach ($data as $lines => $score)
                    $scoreboard->addLine($lines, TextFormat::colorize($score));
                break;
        }
    }

    public function spawn(): void
    {
        BedWarsLoader::getInstance()->getKitManager()->setKit($this, 'Spawn');

        $this->getSession()->setScoreboardType('spawn');
        $this->teleport(BedWarsLoader::getInstance()->getServer()->getDefaultLevel()->getSpawnLocation());
    }
}