<?php

namespace bedwars\manager;

use bedwars\arena\Arena;
use bedwars\arena\ArenaOptions;
use bedwars\Loader;
use pocketmine\plugin\PluginBase;
use pocketmine\Server;
use pocketmine\utils\Config;

class ArenaManager extends Manager
{


    /** @var Arena[] */
    public array $arenas = [];

    /**
     * @param PluginBase|null $plugin
     * @return void
     */
    public function init(?PluginBase $plugin): void
    {
        $config = ExtensionManager::getModule(ModulesIdentifier::CONFIG_MANAGER)->getConfig(Loader::getInstance()->getDataFolder() . 'arenas-data.yml', Config::YAML);

        foreach ($config->getAll() as $arena => $data) {
            $this->create(
                $arena,
                ArenaOptions::create()
                    ->setWorld($data['worldName'])
                    ->setBlockPlaced($data['blockPlaced'])
                    ->setBlockBreak($data['blockBreak'])
            );
        }
    }

    /**
     * @param string $name
     * @param ArenaOptions $options
     * @return void
     */
    public function create(string $name, ArenaOptions $options): void
    {
        $this->arenas[$name] = new Arena($name, $options);
        $this->getArenaByName($name)->setLoad(true);
    }

    /**
     * @param string $name
     * @return void
     */
    public function unload(string $name): void
    {
        $arena = $this->getArenaByName($name);

        if ($arena->isLoad())
            $arena->setLoad(false);
    }

    /**
     * @param string $name
     * @return Arena|null
     */
    public function getArenaByName(string $name): ?Arena
    {
        if (!isset($this->arenas[$name]))
            return null;

        return $this->arenas[$name];
    }

    /**
     * @return Arena[]
     */
    public function getArenas(): array
    {
        return $this->arenas;
    }

    public function save(?PluginBase $plugin): void
    {
        $config = ExtensionManager::getModule(ModulesIdentifier::CONFIG_MANAGER)->getConfig(Loader::getInstance()->getDataFolder() . 'arenas-data.yml', Config::YAML);
        $data = [];

        foreach ($this->arenas as $arena) {
            $data[$arena->getName()] = [
                'worldName' => $arena->getOptions()->getWorld()->getDisplayName(),
                'blockPlaced' => $arena->getOptions()->isBlockPlaced(),
                'blockBreak' => $arena->getOptions()->isBlockBreak()
            ];
        }
        $config->setAll($data);
        $config->save();
    }

    public function getPriority(): int
    {
        return ExtensionManager::PRIORITY_NORMAL; // TODO: Change the autogenerated stub
    }
}