<?php

namespace bedwars\manager;

use bedwars\Loader;
use pocketmine\plugin\PluginBase;
use pocketmine\utils\Config;
use pocketmine\utils\TextFormat;

class TranslationManager extends Manager
{

    /** @var Config */
    public Config $config;

    /**
     * @param PluginBase|null $plugin
     * @return void
     */
    public function init(?PluginBase $plugin): void
    {
        # Config
        $config = ExtensionManager::CONFIG()->getConfig($plugin->getDataFolder() . 'lang/' . ExtensionManager::CONFIG()->default_lang . '.yml', 2);

        if (count($config->getAll()) == 0) {
            $plugin->getLogger()->error(Loader::PREFIX . TextFormat::RED . 'The language ' . ExtensionManager::CONFIG()->default_lang . ' not found, enter an existing language!');
            $plugin->onEnableStateChange(false);
            return;
        }

        $plugin->getLogger()->info(Loader::PREFIX . TextFormat::DARK_GREEN . 'The ' . ExtensionManager::CONFIG()->default_lang . ' language has been registered.');
        $this->config = $config;
    }

    /**
     * @param $identifier
     * @param $params
     * @return string|null
     */
    public function getMessageTranslate($identifier, $params = []): ?string
    {
        $message = null;

        if (!is_array($identifier)) {
            $message = $this->config->get($identifier);
        }

        if (is_array($identifier)) {
            $message = $this->config->get($identifier[0]);
            unset($identifier[0]);
            $i = 1;

            foreach ($identifier as $text) {
                $message = $message[$identifier[$i]];
                if ($i != count($identifier)) {
                    $i++;
                }
            }
        }
        return $this->colorize($this->replaceVars($message, $params));
    }

    /**
     * @param $identifier
     * @param $params
     * @return array|null
     */
    public function getArrayTranslation($identifier, $params = []): array
    {
        $message = null;

        if (!is_array($identifier)) {
            $message = $this->config->get($identifier);
        }

        if (is_array($identifier)) {
            $message = $this->config->get($identifier[0]);
            unset($identifier[0]);
            $i = 1;

            foreach ($identifier as $text) {
                $message = $message[$identifier[$i]];
                if ($i != count($identifier)) {
                    $i++;
                }
            }
        }

        $newMessage = [];

        foreach ($message as $slot => $text) {
            $newMessage[] = $this->colorize($this->replaceVars($text, $params));
        }
        return $newMessage;
    }

    /**
     * @param string $text
     * @return string
     */
    public function colorize(string $text): string
    {
        return TextFormat::colorize($text);
    }

    /**
     * @param string $text
     * @param array $params
     * @return string
     */
    public function replaceVars(string $text, array $params): string
    {
        $newMessage = $text;

        foreach ($params as $search => $replace)
            $newMessage = str_replace($search, $replace, $newMessage);

        return $newMessage;
    }

    /**
     * @return int
     */
    public function getPriority(): int
    {
        return ExtensionManager::PRIORITY_NORMAL; // TODO: Change the autogenerated stub
    }
}